apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'io.fabric'

repositories {
    google()
    maven { url 'https://maven.fabric.io/public' }
    maven { url "https://jitpack.io" }
}

android {
    compileSdkVersion COMPILE_SDK_VERSION

    defaultConfig {
        applicationId "ddiehl.batchuninstaller"
        minSdkVersion 21
        targetSdkVersion TARGET_SDK_VERSION
        versionCode 3
        versionName "1.2"

        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }

    signingConfigs {
        debug {
            storeFile file('keys/debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release.initWith(debug)
        upload.initWith(debug)
    }

    def releaseKeystore = getProperties("app/keys/release/keystore.properties")
    if (releaseKeystore != null) {
        signingConfigs.release.storeFile = file(releaseKeystore['storeFile'])
        signingConfigs.release.storePassword = releaseKeystore['storePassword']
        signingConfigs.release.keyAlias = releaseKeystore['keyAlias']
        signingConfigs.release.keyPassword = releaseKeystore['keyPassword']
    }

    def uploadKeystore = getProperties("app/keys/upload/keystore.properties")
    if (uploadKeystore != null) {
        signingConfigs.upload.storeFile = file(uploadKeystore['storeFile'])
        signingConfigs.upload.storePassword = uploadKeystore['storePassword']
        signingConfigs.upload.keyAlias = uploadKeystore['keyAlias']
        signingConfigs.upload.keyPassword = uploadKeystore['keyPassword']
    }

    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix ".X"
            debuggable true
            minifyEnabled false
        }
        release {
            signingConfig signingConfigs.release
            debuggable false
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        upload {
            initWith release
            signingConfig signingConfigs.upload
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$KOTLIN_VERSION"

    implementation "com.android.support:support-v4:$SUPPORT_LIBRARY_VERSION"
    implementation "com.android.support:support-annotations:$SUPPORT_LIBRARY_VERSION"
    implementation "com.android.support:recyclerview-v7:$SUPPORT_LIBRARY_VERSION"
    implementation "com.android.support:design:$SUPPORT_LIBRARY_VERSION"
    implementation "com.android.support:appcompat-v7:$SUPPORT_LIBRARY_VERSION"

    implementation "com.jakewharton.timber:timber:$TIMBER_VERSION"

    implementation "io.reactivex.rxjava2:rxjava:$RXJAVA2_VERSION"
    implementation "io.reactivex.rxjava2:rxandroid:$RXJAVA2_ANDROID_VERSION"
    implementation "com.bignerdranch.android:recyclerview-multiselect:$RECYCLERVIEW_MULTISELECT_VERSION"

    implementation("com.crashlytics.sdk.android:crashlytics:$CRASHLYTICS_VERSION@aar") {
        transitive = true
    }

    implementation 'com.github.damien5314:TimeSinceTextView:1.3'

    testImplementation "junit:junit:$JUNIT_VERSION"
    androidTestImplementation "com.android.support.test:runner:$ANDROID_TESTING_SUPPORT_VERSION"
    androidTestImplementation "com.android.support.test:rules:$ANDROID_TESTING_SUPPORT_VERSION"
    androidTestImplementation "org.mockito:mockito-core:$MOCKITO_VERSION"
    androidTestImplementation "org.mockito:mockito-android:$MOCKITO_VERSION"
}

private Properties getProperties(def filePath) {
    def propertiesFile = rootProject.file(filePath)
    if (!propertiesFile.exists()) return null

    def properties = new Properties()
    properties.load(new FileInputStream(propertiesFile))
    return properties
}
